
package weightmachinedesktopapplication;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;

import java.util.List;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.json.JSONArray;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.swing.JTable;

import javax.swing.table.TableModel;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
//import org.apache.poi.xssf.usermodel.XSSFWorkbook;
/**
 *
 * @author LENOVO
 */
public class ReportsJFrame extends javax.swing.JFrame {

    /** Creates new form ReportsJFrame */
    public ReportsJFrame() {
        initComponents();
        // reportsDetails();
        try {
            callApiForReports();
        } catch (MalformedURLException e) {
        } catch (ProtocolException e) {
        } catch (JSONException e) {
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BtnLogOut = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        BtnExportExcel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(13, 113, 188));

        jLabel1.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Weight Bridge");

        BtnLogOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/weightmachinedesktopapplication/shutdown (1).png"))); // NOI18N
        BtnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnLogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 865, Short.MAX_VALUE)
                .addComponent(BtnLogOut)
                .addGap(22, 22, 22))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BtnLogOut)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(13, 113, 188));

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Bharuwa solutions Pvt Ltd.");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(24, 24, 24))
        );

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        BtnExportExcel.setText("Export to Excel");
        BtnExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnExportExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(BtnExportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BtnExportExcel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }//GEN-END:initComponents

    private void BtnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnLogOutActionPerformed
        LoginJFrame weightFrame = new LoginJFrame();
        weightFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        weightFrame.setSize(800, 610);
        weightFrame.setVisible(true);
        // super.setVisible(false);
        super.dispose();
    }//GEN-LAST:event_BtnLogOutActionPerformed

    private void BtnExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnExportExcelActionPerformed
       exportTableToExcel(jTable1);
    }//GEN-LAST:event_BtnExportExcelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReportsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                                                                                  ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReportsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                                                                                  ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReportsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                                                                                  ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReportsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                                                                                  ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReportsJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnExportExcel;
    private javax.swing.JButton BtnLogOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    public void reportsDetails() {
        Connection conn = null;
        Statement stmt = null;
        WeightBridgeDao obj = new WeightBridgeDao();
        try {
            conn = obj.getStartConnection();
            stmt = conn.createStatement();
            ResultSet rs =
                stmt.executeQuery("SELECT B.SLIP_NO,  NVL(B.VEHICLE_NO,A.VEHICLE_NO) VEHICLE_NO, B.RC_NO, B.GROSS_WEIGHT, \n" +
                                  "B.TERE_WEIGHT, B.NET_WEIGHT, B.TROLLEY_NO, B.CHARGE,\n" +
                                  "B.PARTY,PRODUCT, B.GATE_ENTRY_NUMBER,\n" + "V.SUBTYPE_DESC\n" +
                                  " FROM TOKEN_INWARD A\n" +
                                  " LEFT JOIN WEIGHING_BRIDGE B ON (A.TOKEN_NO = B.TOKEN_NO )\n" +
                                  "  LEFT JOIN VEHICLE_SUBTYPE_MASTER V ON (V.TYPE_CODE = B.VEH_TYPE_CODE )\n" +
                                  " WHERE A.STATUS='I' and B.SLIP_NO is not null and  nvl(b.net_weight,0)>0 ");
            // Add rows to the model
            while (rs.next()) {
            }

        } catch (Exception ex) {

        } finally {
            try {
                stmt.close();
                conn.close();
            } catch (Exception ex) {

            }
        }
    }

    public void callApiForReports() throws ProtocolException, MalformedURLException, JSONException {
        // String url = "http://10.0.6.204:7003/RestApiWeightBridge/resources/reports";
        String url = "http://10.0.6.171:9090/RestApiWeightBridge/resources/reports";
        //String url = "http://127.0.0.1:7101/RestApiWeightBridge/resources/reports";
        // Try-catch block to handle potential IOExceptions and other exceptions
        List<VehicleDetails> filteredList = null;
        try {
            // Create a URL object from the URL string
            URL obj = new URL(url);
            // Open a connection to the URL
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            // Set the request method to GET (optional since GET is default)
            con.setRequestMethod("GET");
            // Add headers to the request
            con.setRequestProperty("User-Agent", "Mozilla/5.0");
            // Get the HTTP response code
            int responseCode = con.getResponseCode();
            // Print the URL being called and the response code
            System.out.println("Sending 'GET' request to URL: " + url);
            System.out.println("Response Code: " + responseCode);
            // Read the response from the input stream
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder(); // Use StringBuilder for efficient string concatenation
            // Read the response line by line
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            // Close the BufferedReader
            in.close();
            // Convert the response to a string
            String jsonResponse = response.toString();
            System.out.println("jsonResponse---" + jsonResponse);
            JSONArray jsonArray = new JSONArray(jsonResponse);
            int count = jsonArray.length();
            if (count <= 0) {
                JOptionPane.showMessageDialog(null, "Data not Found", "Message",
                                              JOptionPane.INFORMATION_MESSAGE);
                return;
            }
          
            String[] columnNames = {
                "Slip No", "Machine No", "Token No", "Vehicle No", "RC No", "Gross Weight", "Tare Weight", "Net Weight",
                "Final Entered By", "Charge", "Party", "Product", "Gate Entry No", "Remarks", "Created By",
                "Creation Date", "Creation Time", "Final Entered Date", "Final Entered Time", "Subtype Desc"
            };
            Object[][] data = new Object[jsonArray.length()][columnNames.length];
//            Object[][] data = {
//                       {"L22411060011", "L2", "600012411050011", "PB07AA1234", "3131", "13131", 
//                        "1212", "11919", "ADMIN", "40", "WW", "RWRWRWRW", "3131", "RWRWRWR", 
//                        "ADMIN", "06/11/2024", "17:35:47", "06/11/2024", "17:37:04", "10 TYRE"},
//                       {"L22410290008", "L2", "600012410240003", "UK08U4696", "1234567", "1200", 
//                        "1000", "200", "ADMIN", "900", "TEST", "REST", "3245678", "TRES", 
//                        "ADMIN", "29/10/2024", "13:03:07", "29/10/2024", "13:04:56", ""},
//                       {"L22411060009", "L2", "600012410240003", "UK08U4696", "", "4500", 
//                        "4000", "500", "ADMIN", "40", "TEST", "TEST", "", "TEST", 
//                        "ADMIN", "06/11/2024", "17:21:13", "06/11/2024", "17:25:06", "10 TYRE"},
//                       {"L22411060010", "L2", "600012410240003", "UK08U4696", "", "4000", 
//                        "3500", "500", "ADMIN", "40", "TEST", "TEST", "", "TEST", 
//                        "ADMIN", "06/11/2024", "17:27:06", "06/11/2024", "17:27:24", "10 TYRE"}
//                   };

            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject jsonObject = jsonArray.getJSONObject(i);
                System.out.println(" jsonObject.get(\"slipNo\")--"+ jsonObject.get("slipNo"));
                           data[i][0] = jsonObject.optString("slipNo", "N/A");
                           data[i][1] = jsonObject.optString("machineNo", "N/A");
                           data[i][2] = jsonObject.optString("tokenNo", "N/A");
                           data[i][3] = jsonObject.optString("vehicleNo", "N/A");
                           data[i][4] = jsonObject.optString("rcNo", "N/A");
                           data[i][5] = jsonObject.optString("grossWeight", "N/A");
                           data[i][6] = jsonObject.optString("tereWeight", "N/A");
                           data[i][7] = jsonObject.optString("netWeight", "N/A");
                           data[i][8] = jsonObject.optString("finalEnteredBy", "N/A");
                           data[i][9] = jsonObject.optString("charge", "N/A");
                           data[i][10] = jsonObject.optString("party", "N/A");
                           data[i][11] = jsonObject.optString("product", "N/A");
                           data[i][12] = jsonObject.optString("gateEntryNumber", "N/A");
                           data[i][13] = jsonObject.optString("remarks", "N/A");
                           data[i][14] = jsonObject.optString("createdBy", "N/A");
                           data[i][15] = jsonObject.optString("creationDate", "N/A");
                           data[i][16] = jsonObject.optString("creationTime", "N/A");
                           data[i][17] = jsonObject.optString("finalEnteredDate", "N/A");
                           data[i][18] = jsonObject.optString("finalEnteredTime", "N/A");
                           data[i][19] = jsonObject.optString("subtypeDesc", "N/A");

            }
            DefaultTableModel model = new DefaultTableModel(data, columnNames);
            jTable1.setModel(model);


        } catch (IOException e) {
            // Print the exception message if an error occurs
            String value=e.toString();
            System.err.println("Error during API call: " + e.getMessage());
            //JOptionPane.showMessageDialog(null,value,JOptionPane.INFORMATION_MESSAGE);
            JOptionPane.showMessageDialog(null, "Error--"+value, "Message",
                                          JOptionPane.INFORMATION_MESSAGE);
            e.printStackTrace();
        }
    }
    
    public static void exportTableToExcel(JTable table) {
           // Create a new workbook
           HSSFWorkbook workbook = new HSSFWorkbook(); // Blank workbook
           HSSFSheet sheet = workbook.createSheet("Sheet1"); // Creating a blank Excel sheet
           
        
          /// Workbook workbook = new XSSFWorkbook();
          // Sheet sheet = workbook.createSheet("Sheet1");

           // Get the table's model
           TableModel model = table.getModel();

           // Create the header row
           Row headerRow = sheet.createRow(0);
           for (int col = 0; col < model.getColumnCount(); col++) {
               Cell cell = headerRow.createCell(col);
               cell.setCellValue(model.getColumnName(col));
           }

           // Fill the sheet with table data
           for (int row = 0; row < model.getRowCount(); row++) {
               Row dataRow = sheet.createRow(row + 1);  // start from row 1
               for (int col = 0; col < model.getColumnCount(); col++) {
                   Cell cell = dataRow.createCell(col);
                   Object value = model.getValueAt(row, col);
                   if (value != null) {
                       cell.setCellValue(value.toString());
                   } else {
                       cell.setCellValue("");  // Handle null values
                   }
               }
           }

           // Save the Excel file
           String path="C:/Users/SHUBHAM/Desktop/WB/excelfile/exported_table.xls";
          // String path="C:\\Users\\LENOVO\\Desktop\\mechine\\excelfile\\exported_table.xls";
           try (FileOutputStream fileOut = new FileOutputStream(new File(path))) {
               workbook.write(fileOut);
               workbook.close();
               JOptionPane.showMessageDialog(null, "Excel file exported successfully!");
           } catch (IOException e) {
               e.printStackTrace();
               JOptionPane.showMessageDialog(null, "Error exporting to Excel.");
           }
       }
}
